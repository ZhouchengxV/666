.Класс сущности USER(псевдокод):
package com.example.userservice.model;  
  
import javax.persistence.*;  
  
@Entity  
@Table(name = "users")  
public class User {  
  
    @Id  
    @GeneratedValue(strategy = GenerationType.IDENTITY)  
    private Long id;  
  
    @Column(name = "username", nullable = false, unique = true)  
    private String username;  
  
    @Column(name = "password", nullable = false)  
    // 注意：密码应该存储为哈希值，而不是明文  
    private String password;  
  
    @Column(name = "email", nullable = false, unique = true)  
    private String email;  
  
    // 省略getter和setter方法  
}

Интерфейс UserRepository (псевдокод)
package com.example.userservice.repository;  
  
import com.example.userservice.model.User;  
import org.springframework.data.jpa.repository.JpaRepository;  
import org.springframework.stereotype.Repository;  
  
@Repository  
public interface UserRepository extends JpaRepository<User, Long> {  
    // 这里可以定义额外的查询方法，如果JPA提供的默认方法不满足需求  
}
Класс UserController 
package com.example.userservice.controller;  
  
import com.example.userservice.model.User;  
import com.example.userservice.service.UserService;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.http.HttpStatus;  
import org.springframework.http.ResponseEntity;  
import org.springframework.web.bind.annotation.*;  
  
import java.util.List;  
  
@RestController  
@RequestMapping("/users")  
public class UserController {  
  
    @Autowired  
    private UserService userService;  
  
    @GetMapping("/")  
    public ResponseEntity<List<User>> getAllUsers() {  
        List<User> users = userService.getAllUsers();  
        return new ResponseEntity<>(users, HttpStatus.OK);  
    }  
  
    @GetMapping("/{id}")  
    public ResponseEntity<User> getUserById(@PathVariable Long id) {  
        User user = userService.getUserById(id);  
        if (user == null) {  
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);  
        }  
        return new ResponseEntity<>(user, HttpStatus.OK);  
    }  
  
    @PostMapping("/")  
    public ResponseEntity<User> createUser(@RequestBody User user) {  
        User createdUser = userService.createUser(user);  
        return new ResponseEntity<>(createdUser, HttpStatus.CREATED);  
    }  
  
    // ... PUT 和 DELETE 方法 ...  
}

Класс UserService
package com.example.userservice.service;  
  
import com.example.userservice.model.User;  
import com.example.userservice.repository.UserRepository;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.stereotype.Service;  
  
@Service  
public class UserService {  
  
    @Autowired  
    private UserRepository userRepository;  
  
    public List<User> getAllUsers() {  
        return userRepository.findAll();  
    }  
  
    public User getUserById(Long id) {  
        return userRepository.findById(id).orElse(null);  
    }  
  
    public User createUser(User user) {  
        // 这里可能需要添加密码加密等逻辑  
        // ...  
        return userRepository.save(user);  
    }  
  
    // ... UPDATE 和 DELETE 方法 ...  
}
